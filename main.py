from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo
from aiogram.filters import Command
from aiohttp import web
import asyncio
import logging
import requests
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "8460820194:AAHaqb2bsLGaH1BMGuuK80F7l2YI0TTExDc"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
ATLAS_TOKEN = "5486553522:1PL3JMD1AB"  # –í–∞—à —Ç–æ–∫–µ–Ω Atlas
ATLAS_URL = "https://api.atlass.digital"
load_dotenv()
tokened = os.getenv('BOT_TOKEN')
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=tokened)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
requests_data = {}

async def handle_atlas_request(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Atlas API"""
    try:
        headers = {"Content-Type": "application/json"}
        payload = {
            "token": ATLAS_TOKEN,
            "type": data["type"],
            "search": data["search"],
            "method": data.get("method", "lite")
        }
        
        response = requests.post(ATLAS_URL, json=payload, headers=headers)
        return response.json()
    except Exception as e:
        return {"error": str(e)}

# HTTP API endpoints
async def handle_search(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        data = await request.json()
        required_fields = ['type', 'search']
        
        if not all(field in data for field in required_fields):
            return web.json_response({"error": "Missing required fields"}, status=400)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        valid_types = ['email', 'ip', 'phone', 'fio']
        if data['type'] not in valid_types:
            return web.json_response({"error": "Invalid search type"}, status=400)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Atlas
        result = await handle_atlas_request(data)
        return web.json_response(result)
        
    except Exception as e:
        return web.json_response({"error": f"Internal server error: {str(e)}"}, status=500)

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return web.json_response({"status": "ok", "service": "Atlas API Bot"})

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ Atlas API Bot\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Atlas API.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–∞—à–µ–º—É API endpoint."
    )

def setup_routes(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API"""
    app.router.add_post('/api/search', handle_search)
    app.router.add_get('/health', health_check)

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    bot_task = asyncio.create_task(dp.start_polling(bot))
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app = web.Application()
    setup_routes(app)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    
    print("üöÄ API Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì° HTTP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    print("üîó Endpoint: POST http://your-host:8080/api/search")
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
    await bot_task

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(start_bot())
